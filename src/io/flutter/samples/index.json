[
    {
        "sourcePath": "lib/src/material/icon_button.dart",
        "sourceLine": 125,
        "serial": "2",
        "package": "flutter",
        "library": "material",
        "element": "IconButton",
        "id": "material.IconButton.2",
        "file": "material.IconButton.2.dart",
        "description": "In this sample the icon button's background color is defined with an [Ink]\nwidget whose child is an [IconButton]. The icon button's filled background\nis a light shade of blue, it's a filled circle, and it's as big as the\nbutton is."
    },
    {
        "sourcePath": "lib/src/material/dropdown.dart",
        "sourceLine": 582,
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "DropdownButton",
        "id": "material.DropdownButton.1",
        "file": "material.DropdownButton.1.dart",
        "description": "This sample shows a `DropdownButton` whose value is one of\n\"One\", \"Two\", \"Free\", or \"Four\"."
    },
    {
        "sourcePath": "lib/src/material/floating_action_button.dart",
        "sourceLine": 115,
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "FloatingActionButton",
        "id": "material.FloatingActionButton.1",
        "file": "material.FloatingActionButton.1.dart",
        "description": "This example shows how to make a simple [FloatingActionButton] in a\n[Scaffold], with a pink [backgroundColor] and a thumbs up [Icon]."
    },
    {
        "sourcePath": "lib/src/widgets/single_child_scroll_view.dart",
        "sourceLine": 196,
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "SingleChildScrollView",
        "id": "widgets.SingleChildScrollView.1",
        "file": "widgets.SingleChildScrollView.1.dart",
        "description": "In this example, the children are spaced out equally, unless there's no more\nroom, in which case they stack vertically and scroll.\n\nWhen using this technique, [Expanded] and [Flexible] are not useful, because\nin both cases the \"available space\" is infinite (since this is in a viewport).\nThe next section describes a technique for providing a maximum height constraint."
    },
    {
        "sourcePath": "lib/src/material/scaffold.dart",
        "sourceLine": 860,
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "Scaffold",
        "id": "material.Scaffold.1",
        "file": "material.Scaffold.1.dart",
        "description": "This example shows a [Scaffold] with an [AppBar], a [BottomAppBar] and a\n[FloatingActionButton]. The [body] is a [Text] placed in a [Center] in order\nto center the text within the [Scaffold] and the [FloatingActionButton] is\ncentered and docked within the [BottomAppBar] using\n[FloatingActionButtonLocation.centerDocked]. The [FloatingActionButton] is\nconnected to a callback that increments a counter."
    },
    {
        "sourcePath": "lib/src/material/card.dart",
        "sourceLine": 99,
        "serial": "2",
        "package": "flutter",
        "library": "material",
        "element": "Card",
        "id": "material.Card.2",
        "file": "material.Card.2.dart",
        "description": "This sample shows creation of a [Card] widget that can be tapped. When\ntapped this [Card]'s [InkWell] displays an \"ink splash\" that fills the\nentire card."
    },
    {
        "sourcePath": "lib/src/widgets/basic.dart",
        "sourceLine": 4378,
        "serial": "2",
        "package": "flutter",
        "library": "widgets",
        "element": "Expanded",
        "id": "widgets.Expanded.2",
        "file": "widgets.Expanded.2.dart",
        "description": "This example shows how to use an [Expanded] widget in a [Row] with multiple\nchildren expanded, utilizing the [flex] factor to prioritize available space."
    },
    {
        "sourcePath": "lib/src/material/app_bar.dart",
        "sourceLine": 257,
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "AppBar.actions",
        "id": "material.AppBar.actions.1",
        "file": "material.AppBar.actions.1.dart",
        "description": "This sample shows adding an action to an [AppBar] that opens a shopping cart."
    },
    {
        "sourcePath": "lib/src/material/floating_action_button.dart",
        "sourceLine": 115,
        "serial": "2",
        "package": "flutter",
        "library": "material",
        "element": "FloatingActionButton",
        "id": "material.FloatingActionButton.2",
        "file": "material.FloatingActionButton.2.dart",
        "description": "This example shows how to make an extended [FloatingActionButton] in a\n[Scaffold], with a  pink [backgroundColor] and a thumbs up [Icon] and a\n[Text] label."
    },
    {
        "sourcePath": "lib/src/material/scaffold.dart",
        "sourceLine": 1149,
        "serial": "2",
        "package": "flutter",
        "library": "material",
        "element": "Scaffold.of",
        "id": "material.Scaffold.of.2",
        "file": "material.Scaffold.of.2.dart",
        "description": "When the [Scaffold] is actually created in the same `build` function, the\n`context` argument to the `build` function can't be used to find the\n[Scaffold] (since it's \"above\" the widget being returned in the widget\ntree). In such cases, the following technique with a [Builder] can be used\nto provide a new scope with a [BuildContext] that is \"under\" the\n[Scaffold]:"
    },
    {
        "sourcePath": "lib/src/material/scaffold.dart",
        "sourceLine": 1149,
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "Scaffold.of",
        "id": "material.Scaffold.of.1",
        "file": "material.Scaffold.of.1.dart",
        "description": "Typical usage of the [Scaffold.of] function is to call it from within the\n`build` method of a child of a [Scaffold]."
    },
    {
        "sourcePath": "lib/src/widgets/single_child_scroll_view.dart",
        "sourceLine": 196,
        "serial": "2",
        "package": "flutter",
        "library": "widgets",
        "element": "SingleChildScrollView",
        "id": "widgets.SingleChildScrollView.2",
        "file": "widgets.SingleChildScrollView.2.dart",
        "description": "In this example, the column becomes either as big as viewport, or as big as\nthe contents, whichever is biggest."
    },
    {
        "sourcePath": "lib/src/material/stepper.dart",
        "sourceLine": 236,
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "Stepper.controlsBuilder",
        "id": "material.Stepper.controlsBuilder.1",
        "file": "material.Stepper.controlsBuilder.1.dart",
        "description": "Creates a stepper control with custom buttons."
    },
    {
        "sourcePath": "lib/src/widgets/form.dart",
        "sourceLine": 65,
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "Form",
        "id": "widgets.Form.1",
        "file": "widgets.Form.1.dart",
        "description": "This example shows a [Form] with one [TextFormField] and a [RaisedButton]. A\n[GlobalKey] is used here to identify the [Form] and validate input."
    },
    {
        "sourcePath": "lib/src/services/system_chrome.dart",
        "sourceLine": 376,
        "serial": "2",
        "package": "flutter",
        "library": "services",
        "element": "SystemChrome.setSystemUIOverlayStyle",
        "id": "services.SystemChrome.setSystemUIOverlayStyle.2",
        "file": "services.SystemChrome.setSystemUIOverlayStyle.2.dart",
        "description": "The following example creates a widget that changes the status bar color\nto a random value on Android."
    },
    {
        "sourcePath": "lib/src/widgets/editable_text.dart",
        "sourceLine": 115,
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "TextEditingController",
        "id": "widgets.TextEditingController.1",
        "file": "widgets.TextEditingController.1.dart",
        "description": "This example creates a [TextField] with a [TextEditingController] whose\nchange listener forces the entered text to be lower case and keeps the\ncursor at the end of the input."
    },
    {
        "sourcePath": "lib/src/material/chip.dart",
        "sourceLine": 219,
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "DeletableChipAttributes.onDeleted",
        "id": "material.DeletableChipAttributes.onDeleted.1",
        "file": "material.DeletableChipAttributes.onDeleted.1.dart",
        "description": "This sample shows how to use [onDeleted] to remove an entry when the\ndelete button is tapped."
    },
    {
        "sourcePath": "lib/src/widgets/navigator.dart",
        "sourceLine": 735,
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "Navigator",
        "id": "widgets.Navigator.1",
        "file": "widgets.Navigator.1.dart",
        "description": "The following example demonstrates how a nested [Navigator] can be used to\npresent a standalone user registration journey.\n\nEven though this example uses two [Navigator]s to demonstrate nested\n[Navigator]s, a similar result is possible using only a single [Navigator].\n\nRun this example with `flutter run --route=/signup` to start it with\nthe signup flow instead of on the home page."
    },
    {
        "sourcePath": "lib/src/material/icon_button.dart",
        "sourceLine": 125,
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "IconButton",
        "id": "material.IconButton.1",
        "file": "material.IconButton.1.dart",
        "description": "This sample shows an `IconButton` that uses the Material icon \"volume_up\" to\nincrease the volume."
    },
    {
        "sourcePath": "lib/src/material/card.dart",
        "sourceLine": 99,
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "Card",
        "id": "material.Card.1",
        "file": "material.Card.1.dart",
        "description": "This sample shows creation of a [Card] widget that shows album information\nand two actions."
    },
    {
        "sourcePath": "lib/src/material/chip.dart",
        "sourceLine": 219,
        "serial": "1",
        "package": "flutter",
        "library": "chip",
        "element": "DeletableChipAttributes.onDeleted",
        "id": "chip.DeletableChipAttributes.onDeleted.1",
        "file": "chip.DeletableChipAttributes.onDeleted.1.dart",
        "description": "This sample shows how to use [onDeleted] to remove an entry when the\ndelete button is tapped."
    },
    {
        "sourcePath": "lib/src/material/raised_button.dart",
        "sourceLine": 85,
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "RaisedButton",
        "id": "material.RaisedButton.1",
        "file": "material.RaisedButton.1.dart",
        "description": "This sample shows how to render a disabled RaisedButton, an enabled RaisedButton\nand lastly a RaisedButton with gradient background."
    },
    {
        "sourcePath": "lib/src/services/keyboard_key.dart",
        "sourceLine": 111,
        "serial": "1",
        "package": "flutter",
        "library": "services",
        "element": "LogicalKeyboardKey",
        "id": "services.LogicalKeyboardKey.1",
        "file": "services.LogicalKeyboardKey.1.dart",
        "description": "This example shows how to detect if the user has selected the logical \"Q\"\nkey."
    },
    {
        "sourcePath": "lib/src/widgets/basic.dart",
        "sourceLine": 4378,
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "Expanded",
        "id": "widgets.Expanded.1",
        "file": "widgets.Expanded.1.dart",
        "description": "This example shows how to use an [Expanded] widget in a [Column] so that\nit's middle child, a [Container] here, expands to fill the space."
    },
    {
        "sourcePath": "lib/src/services/keyboard_key.dart",
        "sourceLine": 1729,
        "serial": "1",
        "package": "flutter",
        "library": "services",
        "element": "PhysicalKeyboardKey",
        "id": "services.PhysicalKeyboardKey.1",
        "file": "services.PhysicalKeyboardKey.1.dart",
        "description": "This example shows how to detect if the user has selected the physical key\nto the right of the CAPS LOCK key."
    },
    {
        "sourcePath": "lib/src/widgets/basic.dart",
        "sourceLine": 5288,
        "serial": "1",
        "package": "flutter",
        "library": "widgets",
        "element": "Listener",
        "id": "widgets.Listener.1",
        "file": "widgets.Listener.1.dart",
        "description": "This example makes a [Container] react to being entered by a mouse\npointer, showing a count of the number of entries and exits."
    },
    {
        "sourcePath": "lib/src/material/bottom_navigation_bar.dart",
        "sourceLine": 115,
        "serial": "1",
        "package": "flutter",
        "library": "material",
        "element": "BottomNavigationBar",
        "id": "material.BottomNavigationBar.1",
        "file": "material.BottomNavigationBar.1.dart",
        "description": "This example shows a [BottomNavigationBar] as it is used within a [Scaffold]\nwidget. The [BottomNavigationBar] has three [BottomNavigationBarItem]\nwidgets and the [currentIndex] is set to index 1. The selected item is\npurple. The `_onItemTapped` function changes the selected item's index\nand displays a corresponding message in the center of the [Scaffold]."
    }
]